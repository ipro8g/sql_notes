- Write a SQL query to display order number, purchase amount, the achieved and unachieved percentage (%) for those order which exceeds the 50% of the target value of 6000. 

* SELECT purch_amt 'amount', (purch_amt/6000)*100 'achieved %', (100-((purch_amt/6000)*100)) 'unachieved %'  FROM orders2 WHERE purch_amt > 3000;






- From the following table, write a SQL query to find the details of those salespeople whose name starts with ‘N’ and the fourth character is 'l'. Rests may be any character. Return salesman_id, name, city, commission.

* SELECT * FROM salesman WHERE name LIKE 'N__l%';







- From the following table, write a SQL query to find those rows where col1 contains the string ( _/ ). Return col1.

* SELECT * FROM special_chars WHERE col1 LIKE '%/_//%' ESCAPE '/';







- From the following table, write a SQL query to find those employees who worked more than two jobs in the past. Return employee id.

* SELECT COUNT(*), employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*) > 1;







- From the following table, write a SQL query to count the number of cities in each country has. Return country ID and number of cities.

* SELECT COUNT(city) 'number of cities', country_id FROM locations GROUP BY country_id;








- From the following table, write a SQL query to find those departments where a manager can manage four or more employees. Return department_id.

* SELECT DISTINCT department_id FROM employees WHERE employee_id IN(SELECT manager_id FROM employees GROUP BY manager_id HAVING COUNT(*) >= 4);







- From the following tables write a SQL query to select all rows from both participating tables as long as there is a match between pro_com and com_id.

* SELECT * FROM company_mast JOIN item_mast ON company_mast.com_id = item_mast.pro_com;







- From the following tables write a SQL query to calculate the average price of items of each company. Return average value and company name.

* SELECT AVG(item_mast.pro_price) 'average', item_mast.pro_name, company_mast.com_name FROM item_mast, company_mast WHERE item_mast.pro_com = company_mast.com_id GROUP BY item_mast.pro_id;









- From the following tables write a SQL query to calculate and find the average price of items of each company higher than or equal to Rs. 350. Return average value and company name.

* SELECT AVG(item_mast.pro_price) 'average', item_mast.pro_name, company_mast.com_name FROM item_mast, company_mast WHERE item_mast.pro_com = company_mast.com_id GROUP BY item_mast.pro_id HAVING AVG(item_mast.pro_price) >= 350;








-  From the following tables write a SQL query to find the most expensive product of each company. Return pro_name, pro_price and com_name.

* MariaDB [test]> SELECT MAX(item_mast.pro_price) 'most expensive product', item_mast.pro_name, company_mast.com_name FROM item_mast, company_mast WHERE item_mast.pro_com = company_mast.com_id GROUP BY company_mast.com_id;








-  From the following tables write a SQL query to find the names of departments where more than two employees are working. Return dpt_name.

* SELECT dpt_code FROM emp_department WHERE dpt_code IN(SELECT emp_dept FROM emp_details GROUP BY emp_dept HAVING COUNT(*) > 2);








- From the following tables, write a SQL query to find the salespeople who had more than one customer. Return salesman_id and name.


* SELECT name FROM salesman WHERE salesman_id IN(SELECT salesman_id FROM customer2 GROUP BY salesman_id HAVING COUNT(*) > 1);









- Write a query to find the sums of the amounts from the orders table, grouped by date, eliminating all those dates where the sum was not at least 1000.00 above the maximum order amount for that date.

* SELECT ord_date, SUM(purch_amt) FROM orders2 GROUP BY ord_date HAVING (SUM(purch_amt)-1000) >= MAX(purch_amt);








- From the following tables, write a SQL query to find those orders where an order amount less than any order amount of a customer lives in London City. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

* SELECT * FROM orders2 WHERE purch_amt < ANY(SELECT purch_amt FROM orders2 WHERE customer_id IN(SELECT customer_id FROM customer2 WHERE city = 'london'));










- From the following tables, write a SQL query to find those orders where every order amount less than the maximum order amount of a customer lives in London City. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

* SELECT * FROM orders2 WHERE purch_amt < (SELECT MAX(purch_amt) FROM orders2 WHERE customer_id IN(SELECT customer_id FROM customer2 WHERE city = 'london'));










- From the following tables, write a SQL query to calculate the total order amount generated by a salesman. The salesman should belong to the cities where any of the customer living. Return salesman name, city and total order amount

* SELECT SUM(purch_amt) FROM orders2 GROUP BY salesman_id HAVING salesman_id IN(SELECT salesman_id FROM salesman WHERE city IN(SELECT city FROM customer2));










-  From the following tables, write a SQL query to find the average price of each manufacturer's product along with their name. Return Average Price and Company.

* SELECT AVG(item_mast.pro_price), company_mast.com_name FROM item_mast JOIN company_mast ON company_mast.com_id = item_mast.pro_com GROUP BY pro_com;









- From the following tables, write a SQL query to find the employees who work in department 89 or 63. Return emp_idno, emp_fname, emp_lname and emp_dept.

* SELECT emp_details.emp_idno, emp_details.emp_fname, emp_details.emp_lname, emp_department.dpt_name FROM emp_details JOIN emp_department ON emp_details.emp_dept = emp_department.dpt_code WHERE emp_details.emp_dept IN(89, 63);









- From the following tables, write a SQL query to find those employees who work for the department where the department allotment amount is more than Rs. 50000. Return emp_fname and emp_lname.

* SELECT * FROM emp_department JOIN emp_details ON emp_department.dpt_code = emp_details.emp_dept WHERE dpt_allotment > 50000;









-  From the following tables, write a SQL query to find all those employees who work in the Finance department. Return department ID, name (first), job ID and department name.

* SELECT employees.employee_id, employees.first_name, departments.department_id, departments.department_name FROM employees JOIN departments ON employees.department_id = departments.department_id WHERE employees.department_id IN(SELECT department_id FROM departments WHERE department_name = 'finance');







- Write a query to display the employee id, name ( first name and last name ), salary and the SalaryStatus column with a title HIGH and LOW respectively for those employees whose salary is more than and less than the average salary of all employees.

* SELECT salary, first_name, CASE WHEN salary > (SELECT AVG(salary) FROM employees) THEN 'HIGH' ELSE 'LOW' END as 'Salary Status' FROM employees;







- From the following tables, write a SQL query to find those departments where maximum salary is 7000 and above. The employees worked in those departments have already completed multiple jobs. Return all the fields of the departments.

* SELECT * FROM departments WHERE department_id IN(SELECT department_id FROM job_history WHERE department_id IN(SELECT department_id FROM employees GROUP BY department_id HAVING MAX(salary) > 7000) GROUP BY employee_id HAVING COUNT(*) > 1);







- From the following tables, write a SQL query to find those employees who work under a manager based in ‘US’. Return employee_id, first_name, depatment_name, state_province.

* SELECT employees.employee_id, employees.first_name, departments.department_name, locations.state_province FROM employees JOIN departments ON employees.department_id = departments.department_id JOIN locations ON departments.location_id = locations.location_id WHERE employees.department_id IN(SELECT department_id FROM departments WHERE location_id IN(SELECT location_id FROM locations WHERE country_id = 'US'));









- From the following tables, write a SQL query to find those employees whose salary is greater than 50% of their department's total salary bill. Return first name, last name.

* SELECT a.employee_id, a.salary 'sal', a.department_id, SUM(b.salary) 'sum' FROM employees a JOIN employees b ON a.department_id = b.department_id GROUP BY b.department_id HAVING sal > (sum/2);








- From the following table, write a SQL query to find those employees who earn highest salary in a department. Return department ID, employee name, and salary.

* SELECT department_id, salary, employee_id, first_name FROM employees GROUP BY department_id HAVING salary = MAX(salary);









- From the following table, write a SQL query to find those salesperson and customer where more than one order executed. Sort the result-set on 2nd field. Return ID, name.

* SELECT COUNT(*), salesman_id, customer_id FROM orders2 GROUP BY customer_id HAVING COUNT(*) > 1;









- From the following tables, write a SQL query to find those movies, which reviewed by a reviewer and got a rating. Sort the result-set in ascending order by reviewer name, movie title, review Stars. Return reviewer name, movie title, review Stars.

*  SELECT reviewer.rev_name, movie.mov_title, rating.rev_stars FROM reviewer JOIN rating ON reviewer.rev_id = rating.rev_id JOIN movie ON movie.mov_id = rating.mov_id WHERE reviewer.rev_name IS NOT NULL AND rating.rev_stars IS NOT NULL;









-  From the following tables, write a SQL query to find those reviewers who rated more than one movie. Group the result set on reviewer’s name, movie title. Return reviewer’s name, movie title.

* SELECT reviewer.rev_name, movie.mov_title FROM reviewer JOIN rating ON reviewer.rev_id = rating.rev_id JOIN movie ON movie.mov_id = rating.mov_id WHERE movie.mov_id IN(SELECT mov_id FROM rating WHERE rev_id IN(SELECT rev_id FROM rating GROUP BY rev_id HAVING COUNT(*) > 1));









- select all movies rating orderer by rating desc

* SELECT rating.rev_stars, movie.mov_title FROM rating JOIN movie ON rating.mov_id = movie.mov_id ORDER BY rating.rev_stars DESC;









-  From the following tables, write a SQL query to find the movies directed by 'James Cameron'. Return movie title.

* SELECT mov_title FROM movie WHERE mov_id IN(SELECT mov_id FROM movie_direction WHERE dir_id IN(SELECT dir_id FROM director WHERE dir_fname = 'james' and dir_lname = 'cameron'));









- Write a query in SQL to find the name of those movies where one or more actors acted in two or more movies.

* SELECT mov_title FROM movie WHERE mov_id IN(SELECT mov_id FROM movie_cast WHERE act_id IN(SELECT act_id FROM movie_cast GROUP BY act_id HAVING COUNT(*) > 1));











- From the following tables, write a SQL query to find the actors who have not acted in any movie between1990 and 2000 (Begin and end values are included.). Return actor first name, last name, movie title and release year.

* SELECT actor.act_fname, actor.act_lname, movie.mov_title, movie.mov_dt_rel FROM actor JOIN movie_cast ON actor.act_id = movie_cast.act_id JOIN movie ON movie_cast.mov_id = movie.mov_id WHERE movie.mov_dt_rel NOT BETWEEN '1990-01-01' AND '2000-12-31';










- From the following tables, write a SQL query to find the directors with number of genres movies bigger than 1. Group the result set on director first name, last name and generic title. Sort the result-set in ascending order by director first name and last name. Return director first name, last name and number of genres movies.

* SELECT director.dir_fname, director.dir_lname, COUNT(*) FROM director JOIN movie_direction ON director.dir_id = movie_direction.dir_id JOIN movie_genres ON movie_direction.mov_id = movie_genres.mov_id GROUP BY movie_genres.gen_id HAVING COUNT(*) > 1 ORDER BY COUNT(*) DESC;











- From the following tables, write a SQL query to find those actors who have directed their movies. Return actor first name, last name, movie title and role.

* SELECT director.dir_fname, director.dir_lname, actor.act_fname, actor.act_lname, movie.mov_title, movie_cast.role FROM movie JOIN movie_cast ON movie.mov_id = movie_cast.mov_id JOIN movie_direction ON movie.mov_id = movie_direction.mov_id JOIN director ON movie_direction.dir_id = director.dir_id JOIN actor ON actor.act_fname = director.dir_fname AND actor.act_lname = director.dir_lname;











- From the following tables, write a query in SQL to generate a report, which contain the fields movie title, name of the female actor, year of the movie, role, movie genres, the director, date of release, and rating of that movie.

* SELECT movie.mov_title, actor.act_fname, actor.act_lname, movie.mov_year, movie_cast.role, genres.gen_title, director.dir_fname, director.dir_lname, movie.mov_dt_rel, rating.rev_stars FROM movie JOIN movie_cast ON movie.mov_id = movie_cast.mov_id JOIN actor ON movie_cast.act_id = actor.act_id JOIN movie_genres ON movie.mov_id = movie_genres.mov_id JOIN genres ON movie_genres.gen_id = genres.gen_id JOIN movie_direction ON movie.mov_id = movie_direction.mov_id JOIN director ON movie_direction.dir_id = director.dir_id JOIN rating ON movie.mov_id = rating.mov_id WHERE actor.act_gender = 'F';













- From the following table, write a SQL query to count the number of matches ending with a goalless draw in-group stage of play. Return number of matches.

* SELECT COUNT(*) FROM (SELECT match_no FROM match_details WHERE play_stage = 'G' GROUP BY match_no HAVING SUM(goal_score) = 0) AS total_matches;











- from the following tables, write a SQL query to find the player who scored the last goal for Portugal against Hungary. Return player name.

*  SELECT player_name FROM player_mast WHERE player_id = (SELECT player_id FROM goal_details WHERE goal_id = (SELECT MAX(goal_id) FROM goal_details WHERE match_no = (SELECT match_no FROM match_details WHERE team_id IN(SELECT country_id FROM soccer_country WHERE country_name IN('portugal', 'hungary')) GROUP BY match_no HAVING COUNT(match_no) = 2)));












-  From the following table, write a SQL query to find the club, which supplied the most number of players to the 2016-EURO cup. Return club name, number of players.

* SELECT playing_club, COUNT(*) FROM player_mast GROUP BY playing_club HAVING COUNT(*) = (SELECT MAX(mycount) FROM (SELECT COUNT(*) mycount FROM player_mast GROUP BY playing_club) AS MAJOR);










- From the following tables, write a SQL query to find the maximum penalty shots taken by the teams. Return country name, maximum penalty shots.

* SELECT COUNT(*), soccer_country.country_name FROM penalty_shootout JOIN soccer_country ON penalty_shootout.team_id = soccer_country.country_id GROUP BY team_id HAVING COUNT(*) = (SELECT MAX(penalty_table.goals) FROM (SELECT COUNT(*) AS goals FROM penalty_shootout GROUP BY team_id) penalty_table);








-  From the following tables, write a SQL query to find the maximum number of penalty shots taken by the players. Return country name, player name, jersey number and number of penalty shots

* SELECT COUNT(*) penalty_shoots, a.player_id, b.player_name, b.jersey_no, c.country_name FROM penalty_shootout a JOIN player_mast b ON a.player_id = b.player_id JOIN soccer_country c ON b.team_id = c.country_id GROUP BY a.player_id HAVING COUNT(*) = (SELECT MAX(penalty_table.goals) FROM (SELECT COUNT(*) AS goals FROM penalty_shootout GROUP BY player_id) penalty_table);









- From the following table, write a SQL query to find those match where the highest number of penalty shots taken

* SELECT match_no, COUNT(*) shoots FROM penalty_shootout GROUP BY match_no HAVING COUNT(*) = (SELECT MAX(penalty_table.goals) FROM (SELECT COUNT(*) as goals FROM penalty_shootout GROUP BY match_no) penalty_table);










- From the following tables, write a SQL query to find the venue that has seen the most number of goals. Return venue name, number of goals.

* SELECT soccer_venue.venue_name, COUNT(goal_details.goal_id) FROM goal_details JOIN match_mast ON goal_details.match_no = match_mast.match_no JOIN soccer_venue ON match_mast.venue_id = soccer_venue.venue_id GROUP BY soccer_venue.venue_name HAVING COUNT(goal_details.goal_id) = (SELECT MAX(aux_table.goals) FROM (SELECT soccer_venue.venue_name stadium, goal_details.match_no, COUNT(goal_details.goal_id) goals FROM goal_details JOIN match_mast ON goal_details.match_no = match_mast.match_no JOIN soccer_venue ON match_mast.venue_id = soccer_venue.venue_id GROUP BY soccer_venue.venue_name) aux_table);











-  From the following tables, write a SQL query to find the captain and goalkeeper of all the matches. Return match number, Captain, Goal Keeper and country name.

* SELECT a.match_no, b.player_name `capitain name`, c.player_name `goalkeeper name`, d.country_name FROM match_details a JOIN match_capitain e ON a.match_no = e.match_no JOIN player_mast b ON e.player_capitain = b.player_id JOIN player_mast c ON a.player_gk = c.player_id JOIN soccer_country d ON a.team_id = d.country_id WHERE a.team_id = b.team_id AND a.team_id = c.team_id ORDER BY a.match_no;










-  From the following table, write a SQL query to find all those physicians who completed a medical procedure with certification after the date of expiration of their certificate. Return Physician Name as “Physician”, Position as "Position", Procedure Name as “Procedure”, Date of Procedure as “Date of Procedure”, Patient Name as “Patient”, and expiry date of certification as “Expiry Date of Certificate”. 

* SELECT physician.name `physician`, physician.position `physician position`, proced.name `procedure`, undergoes.date `procedure date`, patient.name `patient`, trainedin.certificationexpires `expiration date` FROM physician JOIN undergoes ON physician.employeeid = undergoes.physician JOIN trainedin ON physician.employeeid = trainedin.physician JOIN proced ON undergoes.procedure = proced.code JOIN patient ON undergoes.patient = patient.ssn WHERE trainedin.certificationexpires < undergoes.date AND undergoes.procedure = trainedin.treatment;










- From the following table, write a SQL query to compute department wise average salary of employees. Return employee name, average salary, department ID as "Current Salary".

* SELECT a.emp_name, a.salary `current salary`, aux_table.averag `average salary`, b.dep_name FROM (SELECT dep_id, AVG(salary) `averag` FROM employees GROUP BY dep_id) aux_table JOIN employees a ON aux_table.dep_id = a.dep_id JOIN department b ON a.dep_id = b.dep_id; 









- From the following table, write a SQL query to find those departments where the number of employees is equal to the number of characters in the department name. Return complete information about the employees.

* SELECT * FROM employees WHERE dep_id = (SELECT dep_id FROM department WHERE dep_name = (SELECT b.dep_name FROM employees a JOIN department b ON a.dep_id = b.dep_id GROUP BY a.dep_id HAVING LENGTH(b.dep_name) = COUNT(a.emp_id)));









- From the following table, write a SQL query to find those managers who handle maximum number of employees. Return managers name, number of employees.


* SELECT a.emp_name, COUNT(b.emp_id) FROM employees a JOIN employees b ON a.dep_id = b.dep_id WHERE a.job_name LIKE 'MANAGER' GROUP BY b.dep_id HAVING b.dep_id = (SELECT dep_id FROM employees GROUP BY dep_id HAVING COUNT(emp_id) = (SELECT MAX(aux_table.workers) FROM (SELECT COUNT(emp_id) workers FROM employees GROUP BY dep_id) aux_table));








- From the following table write an SQL query to display the records with four or more rows with consecutive match_no's, and the crowd attended more than or equal to 50000 for each match. Return match_no, match_date and audience. Order the result by visit_date, descending.

* SELECT b.match_no, b.match_date, b.audience FROM (SELECT a.match_no as from_id, b.match_no as other1, c.match_no as other2, d.match_no as to_id FROM match_crowd a JOIN match_crowd b ON (a.match_no+1) = b.match_no JOIN match_crowd c ON (b.match_no+1) = c.match_no JOIN match_crowd d ON (c.match_no+1) = d.match_no WHERE a.audience >= 50000 AND b.audience >= 50000 AND c.audience >= 50000 AND d.audience >= 50000) aux_table JOIN match_crowd b ON b.match_no BETWEEN aux_table.from_id AND aux_table.to_id;








-  From the following table write a SQL query to know the availability of the doctor for consecutive 2 or more days. Return visiting days.

* SELECT * FROM dr_clinic WHERE availability = 1 AND visiting_date NOT IN(SELECT b.visiting_date FROM dr_clinic a JOIN dr_clinic b ON DATEDIFF(b.visiting_date, a.visiting_date) = 1 JOIN dr_clinic c ON DATEDIFF(c.visiting_date, b.visiting_date) = 1 WHERE a.availability = 0 AND b.availability = 1 AND c.availability = 0);








- From the following table write a SQL query to make a report such that there is a product id column and a sale quantity column for each quarter. Return product ID and sale quantity of each quarter.

* SELECT product_id, MIN(IF(qtr_no = 'qtr1', sale_qty, NULL)) AS qtr1_sale, MIN(IF(qtr_no = 'qtr2', sale_qty, NULL)) AS qtr2_sale, MIN(IF(qtr_no = 'qtr3', sale_qty, NULL)) AS qtr3_sale, MIN(IF(qtr_no = 'qtr4', sale_qty, NULL)) AS qtr4_sale FROM sale GROUP BY product_id ORDER BY product_id;





- Now, consider the following query that returns the salary and bonus for all employees
in department 10. Table BONUS.TYPE determines the amount of the bonus. A type 1
bonus is 10% of an employee’s salary, type 2 is 20%, and type 3 is 30%.

find the sum of the salaries for employees in department 10 along with the sum of
their bonuses. Some employees have more than one bonus and dont want duplicate salaries
for them:


* SELECT SUM(DISTINCT a.sal), SUM((b.type*0.1)*a.sal), a.deptno FROM emp_cook a
JOIN emp_bonus_cook2 b ON a.empno = b.empno GROUP BY a.deptno HAVING a.deptno = 10;






- Write a SQL query to display only the details of employees who either earn the highest salary
or the lowest salary in each department from the employee table.

* (SELECT a.user_name, a.department AS 'dept', a.salary AS 'income', 'MAX' AS 'class' FROM employee a JOIN (SELECT department AS 'dep', MAX(salary) AS 'sal' FROM employee GROUP BY dep) aux ON a.salary = aux.sal AND a.department = aux.dep) UNION (SELECT a.user_name, a.department AS 'dept', a.salary AS 'income', 'MIN' AS 'class' FROM employee a JOIN (SELECT department AS 'dep', MIN(salary) AS 'sal' FROM employee GROUP BY dep) aux ON a.salary = aux.sal AND a.department = aux.dep) ORDER BY dept, income DESC;

